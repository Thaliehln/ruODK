% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/form_schema.R
\name{form_schema}
\alias{form_schema}
\title{Show the schema of one form.}
\usage{
form_schema(flatten = FALSE, odata = FALSE, parse = FALSE,
  pid = get_default_pid(), fid = get_default_fid(),
  url = get_default_url(), un = get_default_un(),
  pw = get_default_pw())
}
\arguments{
\item{flatten}{Whether to flatten the resulting list of lists (TRUE) or not
(FALSE, default).}

\item{odata}{Whether to sanitise the field names to match the way they will
be outputted for OData. While the original field names as given in the
XForms definition may be used as-is for CSV output, OData has some
restrictions related to the domain-qualified identifier syntax it uses.
Default: FALSE.}

\item{parse}{Whether to parse the form schema into a tibble of form field
type and name. This uses \code{`form_schema_parse`} internally.
If used together with `flatten=TRUE` \code{`form_schema`} will raise a
warning and return the unparsed, flattened form schema.}

\item{pid}{The numeric ID of the project, e.g.: 2.
Default: \code{get_default_pid()}.
Set default \code{pid} through \code{ru_setup(pid="...")}.
See \code{vignette("Setup", package = "ruODK")}.}

\item{fid}{The alphanumeric form ID, e.g. "build_Spotlighting-0-8_1559885147".
Default: \code{get_default_fid()}.
Set default \code{fid} through \code{ru_setup(fid="...")}.
See \code{vignette("Setup", package = "ruODK")}.}

\item{url}{The ODK Central base URL without trailing slash.#'
Default: \code{get_default_url()}.
Set default \code{url} through \code{ru_setup(url="...")}.
See \code{vignette("Setup", package = "ruODK")}.}

\item{un}{The ODK Central username (an email address).
Default: \code{get_default_un()}.
Set default \code{un} through \code{ru_setup(un="...")}.
See \code{vignette("Setup", package = "ruODK")}.}

\item{pw}{The ODK Central password.
Default: \code{get_default_pw()}.
Set default \code{pw} through \code{ru_setup(pw="...")}.
See \code{vignette("Setup", package = "ruODK")}.}
}
\value{
A nested list containing the form definition.
  At the lowest nesting level, each form field consists of a list of two
  nodes, `name` (the underlying field name) and `type` (the XForm field
  type, as in "string", "select1", "geopoint", "binary" and so on).
  These fields are nested in lists of tuples `name` (the XForm screen name),
  `children` (the fields as described above), `type` ("structure" for non-
  repeating screens, "repeat" for repeating screens).
  A list with `name` "meta" may precede the structure, if several metadata
  fields are captured (e.g. "instanceId", form start datetimes etc.).
}
\description{
\lifecycle{stable}
}
\examples{
\dontrun{
# Set default credentials, see vignette "setup"
ruODK::ru_setup(
  svc = paste0(
    "https://sandbox.central.opendatakit.org/v1/projects/14/",
    "forms/build_Flora-Quadrat-0-2_1558575936.svc"
  ),
  un = "me@email.com",
  pw = "..."
)

# With explicit pid and fid
fs_defaults <- form_schema(pid = 1, fid = "build_xformsId")

# With defaults
fs_nested <- form_schema(
  flatten = FALSE,
  odata = FALSE
)
listviewer::jsonedit(fs_nested)

fs_flattened <- form_schema(
  flatten = TRUE,
  odata = FALSE
)
listviewer::jsonedit(fs_flattened)

# form_schema returns a nested list. There's nothing to change about that.
class(fs_nested)
# > "list"

fs_flattened
# > "list"

# This assumes knowledge of that exact form being tested.
# First node: type "structure" (a field group) named "meta".
fs_nested[[1]]$type
# > "structure"

fs_nested[[1]]$name
# > "meta"

# The first node contains children, which means it's an XForm field group.
names(fs_nested[[1]])
# > "children" ...

# Next node: a "meta" field of type "string" capturing the  "instanceId".
# First child node of "meta": type "string", name "instanceId".
fs_nested[[1]]$children[[1]]$type
# > "string"
fs_nested[[1]]$children[[1]]$name
# > "instanceID"

# In the flattened version, the field's and it's ancestors' names are the
# components of "path".
fs_flattened[[1]]$path
# > "meta". "instanceId"

fs_flattened[[1]]$type
# > "string"

# Last node: a "meta" field capturing the datetime of form completion
fs_flattened[[length(fs_flattened)]]$type
# > "dateTime"
fs_nested[[length(fs_nested)]]$type
# > "dateTime"

# Parsed into a tibble of form field type/name:
# Useful to inform further parsing of submission data (attachments, dates)
fsp <- form_schema(parse = TRUE)

# Attachments: use \\code{`attachment_get`} on each of
fsp \%>\% dplyr::filter(type == "binary")

# dateYime: use \\code{`parse_datetime`} on each of
fsp \%>\% dplyr::filter(type == "dateTime")

# Point location: will be split into lat/lon/alt/acc
fsp \%>\% dplyr::filter(type == "geopoint")
}
}
\seealso{
\url{https://odkcentral.docs.apiary.io/#reference/forms-and-submissions/'-individual-form/retrieving-form-schema-json}

Other restful-api: \code{\link{attachment_link}},
  \code{\link{attachment_list}}, \code{\link{audit_get}},
  \code{\link{form_detail}}, \code{\link{form_list}},
  \code{\link{form_schema_parse}}, \code{\link{form_xml}},
  \code{\link{project_create}},
  \code{\link{project_detail}}, \code{\link{project_list}},
  \code{\link{submission_detail}},
  \code{\link{submission_export}},
  \code{\link{submission_get}},
  \code{\link{submission_list}}
}
\concept{restful-api}
