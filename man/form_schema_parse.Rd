% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/form_schema_parse.R
\name{form_schema_parse}
\alias{form_schema_parse}
\title{Parse a form_schema into a tibble of fields with name, type, and path.}
\usage{
form_schema_parse(fs, verbose = FALSE)
}
\arguments{
\item{fs}{The output of form_schema as nested list}

\item{verbose}{Whether to display debug messages or not (default)}
}
\description{
\lifecycle{maturing}
}
\details{
The `form_schema` is a nested list of lists containing the form definition.
The form definition consists of fields (with a type and name), and form
groups, which are rendered as separate ODK Collect screens.
Form groups in turn can also contain form fields.

\code{`form_schema_parse`} recursively unpacks the form and extracts the name
and type of each field. This information then can be used to inform the user
which columns require \code{`parse_datetime`}, \code{`attachment_get`}, or
\code{`attachment_link`}, respectively.
}
\examples{
\dontrun{
# Option 1: in two steps
fs <- form_schema(flatten = FALSE) # Default, but shown for clarity
fsp <- form_schema_parse(fs)

# Option 2: in one go
fsp <- form_schema(parse = TRUE)

fsp

# Attachments: use \\code{`attachment_get`} on each of
fsp \%>\% dplyr::filter(type == "binary")

# dateYime: use \\code{`parse_datetime`} on each of
fsp \%>\% dplyr::filter(type == "dateTime")

# Point location: will be split into lat/lon/alt/acc
fsp \%>\% dplyr::filter(type == "geopoint")
}
}
