% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/attachment_link.R
\name{attachment_link}
\alias{attachment_link}
\title{Change a tibble of submissions to link to local media attachments.}
\usage{
attachment_link(data_tbl, pid, fid, pth = "media",
  url = Sys.getenv("ODKC_URL"), un = Sys.getenv("ODKC_UN"),
  pw = Sys.getenv("ODKC_PW"))
}
\arguments{
\item{data_tbl}{A tibble of submissions as returned by `submission_export`,
unzip and read_csv.}

\item{pid}{The numeric ID of the project, e.g.: 2.}

\item{fid}{The alphanumeric form ID, e.g. "build_Spotlighting-0-8_1559885147".}

\item{pth}{The local path to downloaded attachments, default: `media/`.
Attachments from `submission_export` will extract to `media/`.
In contrast, `attachment_get` saves to `attachments/<uuid>/` and
returns that path. See vignette `restapi` for a usage example.}

\item{url}{The base ODK Central without a trailing slash,
e.g. "https://sandbox.central.opendatakit.org".
Default: \code{get_default_url()},
which calls \code{Sys.getenv("ODKC_URL")}.}

\item{un}{The ODK Central username (an email address).
Default: \code{get_default_un()},
which calls \code{Sys.getenv("ODKC_UN")}.
See \code{vignette("Setup", package = "ruODK")}.}

\item{pw}{The ODK Central password.
Default: \code{get_default_pw()},
which calls \code{Sys.getenv("ODKC_PW")}.}
}
\value{
The tibble of submission data with attachment filenames prefixed
        with local attachment folder.
}
\description{
A form's `form_schema` lists form fields generating attachments as type "binary".
The zip file downloaded by `submission_export` contains a folder "media" with
all attachments.
}
\examples{
\dontrun{
# extract from form schema names of fields with type "binary" as `att_fieldnames`
fs <- form_schema(Sys.getenv("ODKC_TEST_PID"), Sys.getenv("ODKC_TEST_FID"),
  url = Sys.getenv("ODKC_TEST_URL"), un = Sys.getenv("ODKC_TEST_UN"),
  pw = Sys.getenv("ODKC_TEST_PW")
)

# export submissions, unzip, read_csv
# prepend all `attachment_fieldnames` with `att_local` path ("media")
# fs::file_exists verifies that local paths are correct
}
}
